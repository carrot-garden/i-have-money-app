app {
  host = "127.0.0.1"
  host = ${?ihavemoney_writefront_host}
  http-port = 8101
  http-port = ${?ihavemoney_writefront_http_port}
  port = 10101
  port = ${?ihavemoney_writefront_tcp_port}

  secret-key = "changeit"
  secret-key = ${?ihavemoney_secret_key}

  unsafe-routes-enabled = true
  unsafe-routes-enabled = ${?ihavemoney_unsafe_routes_enabled}
}

write-backend {
  host = "127.0.0.1"
  host = ${?ihavemoney_writeback_host}
  port = 9101
  port = ${?ihavemoney_writeback_port}
  system = "iHaveMoneyWriteBackend"
}

akka {
  loglevel = "INFO"

  actor {
    provider = "akka.remote.RemoteActorRefProvider"

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
      CommandEnvelope = "ru.pavkin.ihavemoney.serialization.CommandEnvelopeSerializer"

      FinishInitialization = "ru.pavkin.ihavemoney.serialization.FinishInitializationSerializer"
      ReceiveIncome = "ru.pavkin.ihavemoney.serialization.ReceiveIncomeSerializer"
      Spend = "ru.pavkin.ihavemoney.serialization.SpendSerializer"
      CreateFortune = "ru.pavkin.ihavemoney.serialization.CreateFortuneSerializer"
      AddEditor = "ru.pavkin.ihavemoney.serialization.AddEditorSerializer"
      BuyAsset = "ru.pavkin.ihavemoney.serialization.BuyAssetSerializer"
      SellAsset = "ru.pavkin.ihavemoney.serialization.SellAssetSerializer"
      ReevaluateAsset = "ru.pavkin.ihavemoney.serialization.ReevaluateAssetSerializer"
      TakeOnLiability = "ru.pavkin.ihavemoney.serialization.TakeOnLiabilitySerializer"
      PayLiabilityOff = "ru.pavkin.ihavemoney.serialization.PayLiabilityOffSerializer"
      CreateUser = "ru.pavkin.ihavemoney.serialization.CreateUserSerializer"
      LoginUser = "ru.pavkin.ihavemoney.serialization.LoginUserSerializer"
      ConfirmEmail = "ru.pavkin.ihavemoney.serialization.ConfirmEmailSerializer"
      ResendConfirmationEmail = "ru.pavkin.ihavemoney.serialization.ResendConfirmationEmailSerializer"
      ExchangeCurrency = "ru.pavkin.ihavemoney.serialization.ExchangeCurrencySerializer"
      CorrectBalances = "ru.pavkin.ihavemoney.serialization.CorrectBalancesSerializer"
      UpdateLimits = "ru.pavkin.ihavemoney.serialization.UpdateLimitsSerializer"
      CancelTransaction = "ru.pavkin.ihavemoney.serialization.CancelTransactionSerializer"
    }

    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto

      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$FinishInitialization" = FinishInitialization
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$ReceiveIncome" = ReceiveIncome
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$Spend" = Spend
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$CreateFortune" = CreateFortune
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$AddEditor" = AddEditor
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$BuyAsset" = BuyAsset
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$SellAsset" = SellAsset
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$ReevaluateAsset" = ReevaluateAsset
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$TakeOnLiability" = TakeOnLiability
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$PayLiabilityOff" = PayLiabilityOff
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$ExchangeCurrency" = ExchangeCurrency
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$CorrectBalances" = CorrectBalances
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$UpdateLimits" = UpdateLimits
      "ru.pavkin.ihavemoney.domain.fortune.FortuneProtocol$CancelTransaction" = CancelTransaction
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$CreateUser" = CreateUser
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$LoginUser" = LoginUser
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$ConfirmEmail" = ConfirmEmail
      "ru.pavkin.ihavemoney.domain.user.UserProtocol$ResendConfirmationEmail" = ResendConfirmationEmail
      "ru.pavkin.ihavemoney.domain.CommandEnvelope" = CommandEnvelope
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${app.host}
      port = ${app.port}
    }
  }

  cluster.client {
    initial-contacts = [
      "akka.tcp://"${write-backend.system}"@"${write-backend.host}":"${write-backend.port}"/system/receptionist"
    ]
  }
}
